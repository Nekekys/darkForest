{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","check","setCheck","stateText","setStateText","className","onClick","name","value","onChange","e","text","target","console","log","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,oHCuI5BC,MAnIf,WAAgB,IAAD,EAEYC,mBAAS,QAFrB,mBAENC,EAFM,KAEAC,EAFA,OAGoBF,mBAAS,IAH7B,mBAGNG,EAHM,KAGIC,EAHJ,KA4Cb,MAAY,QAATH,EAEG,yBAAKI,UAAU,OACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,OAAd,6SACA,0BAAMC,QA7CK,WACnBJ,EAAS,YA4CD,0CAIQ,UAATD,EAEH,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,4KACA,0BAAMC,QAnDK,WACnBJ,EAAS,WAkD2BG,UAAU,YAAtC,oCAIQ,UAATJ,EAEH,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,4GACA,uBAAGA,UAAU,WAAb,6gCAIA,2BAAOE,KAAM,IAAKC,MAAOL,EAAWM,SAvDxB,SAACC,GACrB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBJ,EAAaO,GACbE,QAAQC,MACI,uEAARH,GAAkC,uEAARA,GAAkC,uEAARA,GAAkC,gBAARA,IAChFT,EAAS,WACTE,EAAa,MAiDqDW,KAAM,OAAQV,UAAU,iBAI5E,WAATJ,EAEH,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,2DACA,0BAAMC,QAtEK,WACnBJ,EAAS,WAqE2BG,UAAU,YAAtC,0CAIQ,UAATJ,EAEH,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,6EACA,uBAAGA,UAAU,WAAb,k3DAOA,2BAAOG,MAAOL,EAAYI,KAAM,IAAKE,SAvExB,SAACC,GACtB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBJ,EAAaO,GACD,SAARA,GAA2B,SAARA,GAA2B,kCAARA,GAA2B,kCAARA,IAC3DT,EAAS,WACTE,EAAa,MAkEuDW,KAAM,OAAQV,UAAU,iBAI9E,WAATJ,EAEH,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,2DACA,0BAAMC,QA5FK,WACnBJ,EAAS,WA2F2BG,UAAU,YAAtC,0CAIQ,UAATJ,EAEH,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,6EACA,uBAAGA,UAAU,WAAb,qhBAGA,2BAAOG,MAAOL,EAAYI,KAAM,IAAKE,SApFxB,SAACC,GACtB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBJ,EAAaO,GACD,sEAARA,GAAiC,sEAARA,GAAiC,sEAARA,GAAiC,sEAARA,IAC7ET,EAAS,UACTE,EAAa,MA+EuDW,KAAM,OAAQV,UAAU,iBAI9E,UAATJ,EAEH,yBAAKI,UAAU,OACb,wBAAIA,UAAU,OAAd,6fAHF,GCjHYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.51cc2aed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  const [check,setCheck] = useState('main')\n  const [stateText,setStateText] = useState('')\n  const  clickPart_1 = () => {\n    setCheck('part_1')\n  }\n  const  clickPart_2 = () => {\n    setCheck('part_2')\n  }\n  const  clickPart_3 = () => {\n    setCheck('part_3')\n  }\n  const  clickPart_4 = () => {\n    setCheck('part_4')\n  }\n  const  changeInputR = (e) => {\n    let text = e.target.value\n    setStateText(text)\n    console.log()\n    if((text == \"Юрий Гагарин\")||(text == \"юрий гагарин\")||(text == \"Юрий гагарин\")||(text == \"Yuri Gagarin\")){\n      setCheck('dalee_1')\n      setStateText('')\n    }\n  }\n  const  changeInputQ1 = (e) => {\n    let text = e.target.value\n    setStateText(text)\n    if((text == \"anime\")||(text == \"Anime\")||(text == \"аниме\")||(text == \"Аниме\")){\n      setCheck('dalee_2')\n      setStateText('')\n    }\n  }\n  const  changeInputQ2 = (e) => {\n    let text = e.target.value\n    setStateText(text)\n    if((text == \"полицейский\")||(text == \"полицейским\")||(text == \"Полицейским\")||(text == \"Полицейский\")){\n      setCheck('part_5')\n      setStateText('')\n    }\n  }\n\n\n\n  if(check == 'main'){\n    return (\n        <div className=\"App\">\n          <div className=\"start\">\n            <h2 className=\"zag\">Поздравляю вы разгадали шифр, вот ссылка на мою страничку</h2>\n            <span onClick={clickPart_1}>ссылка</span>\n          </div>\n        </div>\n    );\n  }else if(check == 'part_1'){\n    return (\n        <div className=\"App\">\n          <div className=\"part_1\">\n            <h2 className=\"zag\">Все не так просто, давай поиграем</h2>\n            <span onClick={clickPart_2} className=\"button_m\">давай</span>\n          </div>\n        </div>\n    );\n  }else if(check == 'part_2'){\n    return (\n        <div className=\"App\">\n          <div className=\"part_2\">\n            <h2 className=\"zag\">Чисто для разогрева</h2>\n            <p className=\"zagadka\">\n              Первой его наградой после полета в космос стала медаль «За освоение целинных земель».\n              Впоследствии и другим космонавтам при посадке стали вручать аналогичную медаль назовите имя и фамилию человека.\n            </p>\n            <input name={\"1\"} value={stateText} onChange={changeInputR} type={\"text\"} className=\"input_text\"></input>\n          </div>\n        </div>\n    );\n  }else if(check == 'dalee_1'){\n    return (\n        <div className=\"App\">\n          <div className=\"part_2\">\n            <h2 className=\"zag\">Правильно!</h2>\n            <span onClick={clickPart_3} className=\"button_m\">дальше</span>\n          </div>\n        </div>\n    )\n  }else if(check == 'part_3'){\n    return (\n        <div className=\"App\">\n          <div className=\"part_3\">\n            <h2 className=\"zag\">Первый вопрос</h2>\n            <p className=\"zagadka\">\n              Тёмный лес - это очень интересная теория, которая нередко обыгрывается в медиа,\n              но многим она известна именно по ЭТОЙ книге, в ней, автор, цитирует слова знаменитого\n              персонажа Яна: \"от этой войны зависит судьба страны; но что она значит в сравнении\n              с личными правами и свободами? Просто делайте всё, на что способны.\"\n              Ответьте к камому виду исскуства принадлежит этот персонаж.\n            </p>\n            <input value={stateText}  name={\"2\"} onChange={changeInputQ1} type={\"text\"} className=\"input_text\"></input>\n          </div>\n        </div>\n    );\n  }else if(check == 'dalee_2'){\n    return (\n        <div className=\"App\">\n          <div className=\"part_2\">\n            <h2 className=\"zag\">Правильно!</h2>\n            <span onClick={clickPart_4} className=\"button_m\">дальше</span>\n          </div>\n        </div>\n    )\n  }else if(check == 'part_4') {\n    return (\n        <div className=\"App\">\n          <div className=\"part_4\">\n            <h2 className=\"zag\">Второй вопрос</h2>\n            <p className=\"zagadka\">\n              Какова была профессия английского рефери-любителя, впервые применившего свисток на футбольном поле?\n            </p>\n            <input value={stateText}  name={\"3\"} onChange={changeInputQ2} type={\"text\"} className=\"input_text\"></input>\n          </div>\n        </div>\n    )\n  }else if(check == 'part_5') {\n    return (\n        <div className=\"App\">\n          <h2 className=\"zag\">Поздравляю! Эти два вопроса дают ВСЁ, чтобы меня найти, надеюсь мы принадлежим одной цивилизации...</h2>\n        </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}